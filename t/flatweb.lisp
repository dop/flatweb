(in-package :flatweb/test)

(defmacro with-app (options routes &body body)
  (let ((app-variable (gensym "app")))
    `(let ((,app-variable (flatweb:create-app ,options ,routes)))
       (unwind-protect
            (progn
              (flatweb:start ,app-variable)
              ,@body)
         (flatweb:stop ,app-variable)))))

(defmacro with-get (url params &body body)
  `(multiple-value-bind ,params (drakma:http-request ,url)
     ,@body))

(defmacro with-post (url post-data params &body body)
  `(multiple-value-bind ,params (drakma:http-request ,url :method :post :parameters ,post-data)
     ,@body))

(deftest defapp ()
  (with-app '(:port 8080) ()
    (with-get "http://localhost:8080/a" (body status)
      (declare (ignore body))
      (should be = 404 status))))

(deftest routes ()
  (with-app '(:port 8081) `((:get "/" ,(lambda (r) (declare (ignore r)) "Hello, world!"))
                            (:get "/resource/:id" ,(lambda (r id)
                                                     (declare (ignore r))
                                                     (format nil "ID: ~A" id))))
    (with-get "http://localhost:8081/" (body status)
      (should be = 200 status)
      (should be equalp "Hello, world!" body))
    (with-get "http://localhost:8081/resource/123" (body status)
      (should be = 200 status)
      (should be equalp "ID: 123" body))))

(deftest route-order ()
  (with-app '(:port 8081) `((:get "/123" ,(lambda (r)
                                                    (declare (ignore r))
                                                    (format nil "Numberwang!")))
                            (:get "/:id" ,(lambda (r id)
                                            (declare (ignore r))
                                            (format nil "~A is not a numberwang." id))))
    (with-get "http://localhost:8081/123" (body)
      (should be equalp "Numberwang!" body))
    (with-get "http://localhost:8081/321" (body)
      (should be equalp "321 is not a numberwang." body))))

(defun say-hello (req name &optional greeting)
  (declare (ignore req))
  (format nil "~A, ~A!" (or greeting "Hello") (or name "World")))

(deftest query-params ()
  (with-app '(:port 8080) `((:GET "/?name&greeting" ,#'say-hello))
    (with-get "http://localhost:8080" (body)
      (should be equal "Hello, World!" body))
    (with-get "http://localhost:8080?name=Pilypas&greeting=Ola" (body)
      (should be equal "Ola, Pilypas!" body))))

(deftest body-params ()
  (with-app '(:port 9000) `((:POST "/?name&greeting" ,#'say-hello))
    (with-post "http://localhost:9000" () (body)
      (should be equal "Hello, World!" body))
    (with-post "http://localhost:9000" '(("name" . "Pilypas") ("greeting" . "Ola")) (body)
      (should be equal "Ola, Pilypas!" body))))

(deftest param-priority ()
  (with-app '(:port 9001) `((:POST "/?a&b" ,(lambda (r a b)
                                              (declare (ignore r))
                                              (format nil "A is ~A and B is ~A" a b))))
    (with-post "http://localhost:9001?a=1&b=3" '(("a" . "2")) (body)
      (should be equal "A is 2 and B is 3" body))))

(deftest route-composition ()
  (let ((app1 `((:get "/" ,(lambda (r)
                             (declare (ignore r))
                             "hello"))
                (:get "/:a/:b" ,(lambda (r a b)
                                  (declare (ignore r))
                                  (write-to-string (+ (parse-integer a :junk-allowed t)
                                                       (parse-integer b :junk-allowed t)))))))
        (app2 `((:get "/" ,(lambda (r)
                             (declare (ignore r))
                             "labas"))
                (:get "/:a/:b" ,(lambda (r a b)
                                  (declare (ignore r))
                                  (write-to-string (- (parse-integer a :junk-allowed t)
                                                       (parse-integer b :junk-allowed t))))))))
    (with-app '(:port 9001) (append (flatweb:under "/v1" app1)
                                    (flatweb:under "/v2" app2))
      (with-get "http://localhost:9001/v1" (body)
        (should be equal "hello" body))
      (with-get "http://localhost:9001/v1/2/1" (body)
        (should be equal "3" body))
      (with-get "http://localhost:9001/v2" (body)
        (should be equal "labas" body))
      (with-get "http://localhost:9001/v2/2/1" (body)
        (should be equal "1" body)))))
